#!/bin/sh -eu

usage() {
	cat <<-'USAGE'
	Usage: makoctl <command> [options...]
	
	Commands:
	  dismiss [-n id]                Dismiss the notification with the
	                                 given id, or the last notification
	                                 if none is given
	          [-a|--all]             Dismiss all notifications
	          [-g|--group]           Dismiss all the notifications
	                                 in the last notification's group
	  restore                        Restore the most recently expired
	                                 notification from the history buffer
	  invoke [-n id] [action]        Invoke an action on the notification
	                                 with the given id, or the last
	                                 notification if none is given
	  menu [-n id] [prog] [arg ...]  Use [prog] [args ...] to select one
	                                 action to be invoked on the notification
	                                 with the given id, or the last
	                                 notification if none is given
	  list                           List notifications
	  reload                         Reload the configuration file
	  set <key>=<value>              Set a global configuration option
	  help                           Show this help
	USAGE
}

call() {
	busctl -j --user call org.freedesktop.Notifications /fr/emersion/Mako \
		fr.emersion.Mako -- "$@"
}

case $# in (0)
   usage
   exit 1
;;esac

case "$1" in ("dismiss")
	all=0
	group=0
	id=0
	while (exit $(($# > 1)) ); do
		case "$2" in ("-a"|"--all")
			all=1
		;;("-g"|"--group")
			group=1
		;;("-n")
			case $# in (0|1|2)
				echo >&2 "$0: Expected <id> after '-n'"
				exit 1
			;;esac
			id=$3
			shift
		;;(*)
			echo >&2 "$0: Unrecognized option: $2"
			exit 1
		;;esac
		shift
	done

	case $all in (1)
		call DismissAllNotifications
	;;(*)
		call DismissNotification "ub" "$id" "$group"
	;;esac
;;("invoke")
	id=0
	case "$# "${2-}" in (1?* -n|[2-9]* -n)
		id="$3"
		shift 2
	;;esac

	action="default"
	case $# in (1?*|[2-9]*)
		action="$2"
	;;esac

	call InvokeAction "us" "$id" "$action"
;;("restore")
	call RestoreNotification
;;("menu")
	shift 1
	if ! type jq > /dev/null; then
		echo >&2 "$0: jq is required to use 'menu'"
		exit 1
	fi
	case "$# "${2-}" in (1?* -n|[2-9]* -n)
		id="$2"
		actions="$(call ListNotifications | jq --arg id "$id" -re '.data[0][] | select(.id.data==($id | tonumber)) | .actions.data')"
		shift 2
	;;(*)
		actions="$(call ListNotifications | jq -re '.data[0][0].actions.data')"
		id="0"
	;;esac
	case "$(jq -rn "$actions | length")" in (0)
		echo >&2 "$0: No actions found"
		exit 1
	;;esac

	sel="$(jq -rn "$actions|values[]" | "$@")"
	sel="$(jq -rn --arg sel "$sel" "$actions|to_entries[]|select(.value == \$sel).key")"
	case "$sel" in ('')
		echo >&2 "$0: No action selected"
		exit 1
	;;(*)
		call InvokeAction "us" "$id" "$sel"
	;;esac
;;("list")
	call ListNotifications
;;("reload")
	call Reload
;;("set")
	case $# in (0|1)
		echo >&2 "makoctl: missing argument for 'set'"
		exit 1
	;;esac
	name="${2%%'='*}"
	value="${2#*'='}"
	case "$2" in ($name)
		echo >&2 "makoctl: missing '=' in argument for 'set'"
		exit 1
	;;esac
	call SetConfigOption "ss" "$name" "$value"
;;("help"|"--help"|"-h")
	usage
;;(*)
	echo "makoctl: unrecognized command '$1'"
	exit 1
;;esac
